#limits <- c(7, 14, 0.001, 20)
mycontour(logf=norm.rounded.post, limits=limits, data=data, xlab=expression(mu), ylab=expression(sigma^2), main="posterior density, accounting for rounding")
abline(h=0)
s <- simcontour(logf=norm.rounded.post, limits=limits, data=data, m=1000)
min(s$y)
points(s, pch=19, col=gray(0, 0.3))
plot(density(mu), xlab=expression(mu))
lines(density(s$x), lty=2)
legend("topright", legend=c("accounting for rounding", "without accounting for rounding"), lty=1:2, cex=.9)
plot(density(mu), xlab=expression(mu))
lines(density(s$x), lty=2)
legend("topright", legend=c("accounting for rounding", "without accounting for rounding"), lty=c(2,1), cex=.9)
plot(density(mu), xlab=expression(mu), lty=2)
lines(density(s$x), lty=1)
legend("topright", legend=c("accounting for rounding", "without accounting for rounding"), lty=c(2,1), cex=.9)
plot(density(mu), xlab=expression(mu), lty=2)
lines(density(s$x), lty=1)
legend("topright", legend=c("accounting for rounding", "without accounting for rounding"), lty=1:2, cex=.9)
plot(density(sqrt(v)), xlab=expression(sigma), lty=2)
lines(density(s$y), lty=1)
legend("topright", legend=c("accounting for rounding", "without accounting for rounding"), lty=1:2, cex=.9)
#rm(list=ls())
data <- c(10, 11, 12, 11, 9)
S <- sum((data-mean(data))^2)
n <-  length(data)
# grid
mu.grid <- seq(3, 18, length=500)
sd.grid <- seq(0.01, 6, by=0.01)
#
# log posterior density
norm.rounded.post <- function(mu, sigma, data){
logf <- function(mu, sigma, y) {
log( pnorm((y+0.5-mu)/sigma) - pnorm((y-0.5-mu)/sigma) )
}
-2 * log(sigma) + sum(logf(mu, sigma, data))
}
# this doesn't work for whatever reason
#log.post.dens <- outer(mu.grid, exp(log.sd.grid), norm.rounded.post, data)
#log.post.dens <- log.post.dens-max(log.post.dens)
log.post.dens <- matrix(nrow=length(mu.grid), ncol=length(sd.grid))
#dim(log.post.dens)
for(i in 1:length(mu.grid)){
for(j in 1:length(sd.grid)){
log.post.dens[i,j] <- norm.rounded.post(mu.grid[i], sd.grid[j], data)
}
}
#log.post.dens[200:210,100:110]
log.post.dens <- log.post.dens-max(log.post.dens)
post.dens <- exp(log.post.dens)
# contour plot
contours <- c(0.0001, 0.001, 0.01, seq(0.05, 0.95, 0.1))
contour(mu.grid, sd.grid, post.dens, levels=contours, xlab=expression(mu), ylab=expression(sigma), main="posterior density, accounting for rounding")
###
# simulation form the joint posterior distribution
###
# marginal distribution of the posterior mean from the grid
marg.mu.grid <- rowSums(post.dens)
# sample 1000 indices from the vector mu.grid
# based on the marginal distribution of the mean
mu.index <- sample(1:length(mu.grid), size=1000, replace=T, prob=marg.mu.grid)
# get the values corresponding to the simulated indices
mu.sim <- mu.grid[mu.index]
# simulate sd values from the conditional distribution
# on the grid for the mean values just simulated
sd.sim <- rep(NA, 1000)
for(i in 1:1000){
sd.sim[i] <- sample(sd.grid, size=1, prob=post.dens[mu.index[i],])
}
points(mu.sim, sd.sim, pch=19, col=gray(0, 0.3))
plot(density(mu.sim), xlab=expression(mu))
lines(density(mu), lty=2)
legend("topleft", legend=c("accounting for rounding", "without accounting for rounding"), lty=1:2, cex=.9)
plot(density(sd.sim), xlab=expression(sigma))
lines(density(sqrt(v)), lty=2)
legend("topright", legend=c("accounting for rounding", "without accounting for rounding"), lty=1:2, cex=.9)
?dev.copy2eps
?sample
N <- 500
flipseq <- sample(x=c(0,1), size=N, replace=T)
head(flipseq)
?cumsum
r <- cumsum(flipseq)
runprop <- r/(1:N)
plot(n, runprop, type="o")
plot(1:N, runprop, type="o")
plot(1:N, runprop, type="o", log="x")
plot(1:N, runprop, type="o", log="x", ylim=c(0,1))
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
abline(a=0.5, b=0, lty=3)
flipseq[1:10]
flipseq[1:10] +1
c("T", "H")[flipseq[1:10] +1]
paste( c("T", "H")[flipseq[1:10] +1], collapse="")
paste( c("T", "H")[flipseq[1:10] +1], collapse=",")
paste( c("T", "H")[flipseq[1:10] +1], collapse="")
flipletters <- paste( c("T", "H")[flipseq[1:10] +1], collapse="")
displaystring <- paste("Flip sequence = ", flipletters, "...", collapse="")
displaystring
?paste
displaystring <- paste("Flip sequence = ", flipletters, "...", sep="")
displaystring
?text
text(50, 0.8, labels=flipseq)
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
abline(a=0.5, b=0, lty=3)
text(50, 0.8, labels=flipseq, adj=c(0,1))
displaystring
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
text(50, 0.8, labels=displaystring)
text(N, 0.2, # coordinates
paste("End Proportion = ", runprop[N]), # text
adj=c(1,0) # right aligned
)
abline(a=0.5, b=0, lty=3)
N <- 500
flipseq <- sample(x=c(0,1), size=N, replace=T)
r <- cumsum(flipseq)
runprop <- r/(1:N)
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
abline(a=0.5, b=0, lty=3)
flipletters <- paste( c("T", "H")[flipseq[1:10] +1], collapse="")
displaystring <- paste("Flip sequence = ", flipletters, "...", sep="")
text(50, 0.8, labels=displaystring)
text(N, 0.2, # coordinates
paste("End Proportion = ", runprop[N]), # text
adj=c(1,0) # right aligned
)
N <- 500
flipseq <- sample(x=c(0,1), size=N, replace=T)
r <- cumsum(flipseq)
runprop <- r/(1:N)
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
abline(a=0.5, b=0, lty=3)
flipletters <- paste( c("T", "H")[flipseq[1:10] +1], collapse="")
displaystring <- paste("Flip sequence = ", flipletters, "...", sep="")
text(50, 0.8, labels=displaystring)
text(N, 0.2, # coordinates
paste("End Proportion = ", runprop[N]), # text
adj=c(1,0) # right aligned
)
N <- 500
flipseq <- sample(x=c(0,1), size=N, replace=T)
r <- cumsum(flipseq)
runprop <- r/(1:N)
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
abline(a=0.5, b=0, lty=3)
flipletters <- paste( c("T", "H")[flipseq[1:10] +1], collapse="")
displaystring <- paste("Flip sequence = ", flipletters, "...", sep="")
text(50, 0.8, labels=displaystring)
text(N, 0.2, # coordinates
paste("End Proportion = ", runprop[N]), # text
adj=c(1,0) # right aligned
)
N <- 500
flipseq <- sample(x=c(0,1), size=N, replace=T)
r <- cumsum(flipseq)
runprop <- r/(1:N)
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
abline(a=0.5, b=0, lty=3)
flipletters <- paste( c("T", "H")[flipseq[1:10] +1], collapse="")
displaystring <- paste("Flip sequence = ", flipletters, "...", sep="")
text(50, 0.8, labels=displaystring)
text(N, 0.2, # coordinates
paste("End Proportion = ", runprop[N]), # text
adj=c(1,0) # right aligned
)
dev.copy2pdf(file="/Users/Claudius/Dropbox/Kruschke_Dog_Book/RunningPropportion.pdf")
sd <- 0.2
mean <- 0
mean <- 0
sd <- 0.2
xlow <- mean - 3*sd
xhigh <- mean + 3*sd
dx <- 0.02
x <- seq(xlow, xhigh, by=dx)
y <- 1/sd*sqrt(2*pi)*exp(-1/2*(x-mean)^2/sd^2)\
mean <- 0
sd <- 0.2
xlow <- mean - 3*sd
xhigh <- mean + 3*sd
dx <- 0.02
x <- seq(xlow, xhigh, by=dx)
y <- 1/sd*sqrt(2*pi)*exp(-1/2*(x-mean)^2/sd^2)
plot(x, y, type="h", lwd=1)
lines(x, y)
area <- sum(y*dx)
area
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
plot(x, y, type="h", lwd=1)
lines(x, y)
area <- sum(y*dx)
( area <- sum(y*dx) )
?text
?bquote
text(-sd, .9*max(y), adj=c(1,0),
labels=bquote( paste(mu, " = ", .(mean)) )
)
plot(x, y, type="h", lwd=1)
lines(x, y)
text(-sd, .9*max(y), adj=c(1,0),
labels=expression( paste(mu, " = ", mean) )
)
plot(x, y, type="h", lwd=1)
lines(x, y)
text(-sd, .9*max(y), adj=c(1,0),
labels=bquote( paste(mu, " = ", .(mean)) )
)
text(-sd, .8*max(y), adj=c(1,0),
labels=bquote( paste(sigma, " = ", .(sd)) )
)
text(sd, .9*max(y), adj=c(0,1),
bquote( paste(Delta, "x = ", .(dx)) )
)
text(sd, .9*max(y), adj=c(0,0),
bquote( paste(Delta, "x = ", .(dx)) )
)
text(sd, .8*max(y), adj=c(0,0),
labels=bquote( paste(sum(,x,), " ", Delta, "x p(x) = ", .(round(area, 3))) )
)
plot(x, y, type="h", lwd=1)
lines(x, y)
text(-sd, .9*max(y), adj=c(1,0),
labels=bquote( paste(mu, " = ", .(mean)) )
)
text(-sd, .8*max(y), adj=c(1,0),
labels=bquote( paste(sigma, " = ", .(sd)) )
)
text(sd, .9*max(y), adj=c(0,0),
labels=bquote( paste(Delta, "x = ", .(dx)) )
)
text(sd, .8*max(y), adj=c(0,1),
labels=bquote( paste(sum(,x,), " ", Delta, "x p(x) = ", .(round(area, 3))) )
)
plot(x, y, type="h", lwd=1)
lines(x, y)
# approximate integral
( area <- sum(y*dx) )
# add text to plot
# using function bquote
text(-sd, .9*max(y), adj=c(1,0),
labels=bquote( paste(mu, " = ", .(mean)) )
)
text(-sd, .8*max(y), adj=c(1,0),
labels=bquote( paste(sigma, " = ", .(sd)) )
)
text(sd, .9*max(y), adj=c(0,0),
labels=bquote( paste(Delta, "x = ", .(dx)) )
)
text(sd, .8*max(y), adj=c(0,0),
labels=bquote( paste(sum(,x,), Delta, "x p(x) = ", .(round(area, 3))) )
)
plot(x, y, type="h", lwd=1)
lines(x, y)
# approximate integral
( area <- sum(y*dx) )
# add text to plot
# using function bquote
text(-sd, .9*max(y), adj=c(1,0),
labels=bquote( paste(mu, " = ", .(mean)) )
)
text(-sd, .8*max(y), adj=c(1,0),
labels=bquote( paste(sigma, " = ", .(sd)) )
)
text(sd, .9*max(y), adj=c(0,0),
labels=bquote( paste(Delta, "x = ", .(dx)) )
)
text(sd, .8*max(y), adj=c(0,0.5),
labels=bquote( paste(sum(,x,), Delta, "x p(x) = ", .(round(area, 3))) )
)
dev.copy2pdf("file=/Users/Claudius/Dropbox/Kruschke_Dog_Book/IntegralOfDensity.pdf")
dev.copy2pdf(file="/Users/Claudius/Dropbox/Kruschke_Dog_Book/IntegralOfDensity.pdf")
?plot
N <- 500
flipseq <- sample(x=c(0,1), prob=c(0.8, 0.2), size=N, replace=T)
r <- cumsum(flipseq)
runprop <- r/(1:N)
plot(1:N, runprop, type="o", log="x", ylim=c(0,1), col="blue")
abline(a=0.2, b=0, lty=3)
displaystring <- paste("Flip sequence = ", flipletters, "...", sep="")
text(50, 0.8, labels=displaystring)
text(N, 0.5, # coordinates
paste("End Proportion = ", runprop[N]), # text
adj=c(1,0) # right aligned
)
dx <- 0.002
x <- seq(from=0, to=1, by=dx)
y <- 6*x*(1-x)
plot(x, y, type="h")
dx <- 0.02
x <- seq(from=0, to=1, by=dx)
y <- 6*x*(1-x)
plot(x, y, type="h")
lines(x,y)
plot(x, y, type="h", ylab="p(x)")
lines(x,y)
( area <- sum(dx * y) )
plot(x, y, type="h", ylab="p(x)", xlim=c(-.2, 1.2))
lines(x,y)
plot(x, y, type="h", ylab="p(x)", xlim=c(-.4, 1.2))
lines(x,y)
text(-.2, .9*max(y), adj=c(1,0),
labels=bquote( paste(sum(,x,), Delta, "x p(x) = ", .(round(area,3))) )
)
dx <- 0.02
x <- seq(from=0, to=1, by=dx)
y <- 6*x*(1-x)
plot(x, y, type="h", ylab="p(x)", xlim=c(-.4, 1.2))
lines(x,y)
( area <- sum(dx * y) )
text(-.2, .9*max(y), adj=c(0,1),
labels=bquote( paste(sum(,x,), Delta, "x p(x) = ", .(round(area,3))) )
)
dx <- 0.02
x <- seq(from=0, to=1, by=dx)
y <- 6*x*(1-x)
plot(x, y, type="h", ylab="p(x)", xlim=c(-.4, 1.2))
lines(x,y)
( area <- sum(dx * y) )
text(-.4, .9*max(y), adj=c(0,1),
labels=bquote( paste(sum(,x,), Delta, "x p(x) = ", .(round(area,3))) )
)
dx <- 0.02
x <- seq(from=0, to=1, by=dx)
y <- 6*x*(1-x)
plot(x, y, type="h", ylab="p(x)", xlim=c(-.4, 1.2))
lines(x,y)
( area <- sum(dx * y) )
text(-.4, .8*max(y), adj=c(0,1),
labels=bquote( paste(sum(,x,), Delta, "x p(x) = ", .(round(area,3))) )
)
dx <- 0.02
x <- seq(from=0, to=1, by=dx)
y <- 6*x*(1-x)
plot(x, y, type="h", ylab="p(x)", xlim=c(-.4, 1.2))
lines(x,y)
( area <- sum(dx * y) )
# add text to plot
text(-.4, .9*max(y), adj=c(0,1),
labels=bquote(paste(Delta, "x = ", .(dx)))
)
text(-.4, .8*max(y), adj=c(0,1),
labels=bquote( paste(sum(,x,), Delta, "x p(x) = ", .(round(area,3))) )
)
mean <- 0
sd <- 0.2
xlow <- mean - sd
xhigh <- mean + sd
dx <- 0.02
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
plot(x, y, type="h", ylab="p(x)")
mean <- 0
sd <- 0.2
xlow <- mean - sd
xhigh <- mean + sd
dx <- 0.02
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
plot(x, y, type="h", ylab="p(x)", xlim=c(mean-2*sd, mean+2*sd))
mean <- 0
sd <- 0.2
xlow <- mean - sd
xhigh <- mean + sd
dx <- 0.01
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
plot(x, y, type="h", ylab="p(x)", xlim=c(mean-2*sd, mean+2*sd))
mean <- 0
sd <- 0.2
xlow <- mean - sd
xhigh <- mean + sd
dx <- 0.01
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
plot(x, y,
type="h",
ylab="p(x)",
xlim=c(mean-2*sd, mean+2*sd),
ylim=c(0, 1.1*max(y))
)
mean <- 0
sd <- 0.2
xlow <- mean - 3*sd
xhigh <- mean + 3*sd
dx <- 0.01
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
plot(x, y,
type="h",
ylab="p(x)",
#xlim=c(mean-2*sd, mean+2*sd),
ylim=c(0, 1.1*max(y))
)
plot(x[(x >= -sd) && (x <= sd)], y,
type="h",
ylab="p(x)",
#xlim=c(mean-2*sd, mean+2*sd),
ylim=c(0, 1.1*max(y))
)
(x >= -sd) && (x <= sd)
(x >= -sd)
(x >= -sd) & (x <= sd)
mean <- 0
sd <- 0.2
xlow <- mean - 3*sd
xhigh <- mean + 3*sd
dx <- 0.01
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
index <- (x >= -sd) & (x <= sd)
plot(x[index], y[index],
type="h",
ylab="p(x)",
#xlim=c(mean-2*sd, mean+2*sd),
ylim=c(0, 1.1*max(y))
)
mean <- 0
sd <- 0.2
xlow <- mean - 3*sd
xhigh <- mean + 3*sd
dx <- 0.01
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
index <- (x >= -sd) & (x <= sd)
plot(x[index], y[index],
type="h",
ylab="p(x)",
xlim=c(mean-3*sd, mean+3*sd),
ylim=c(0, 1.1*max(y))
)
lines(x,y)
( area <- sum(y[index] * dx) )
( pnorm(sd, mean=0, sd=sd) - pnorm(-sd, mean=0, sd=sd) )
text(-.6, 2, adj=c(0,1),
labels=bquote(paste(Delta, "x = ", .(dx)))
)
text(-.6, 2, adj=c(0,0),
labels=bquote(paste(Delta, "x = ", .(dx)))
)
text(-.6, 1.8, adj=c(0,1),
labels=bquote(paste(sum(,x,), Delta, "x p(x) = ", .(area)))
)
mean <- 0
sd <- 0.2
xlow <- mean - 3*sd
xhigh <- mean + 3*sd
dx <- 0.01
x <- seq(from=xlow, to=xhigh, by=dx)
y <- 1/(sd*sqrt(2*pi))*exp(-1/2*(x-mean)^2/sd^2)
index <- (x >= -sd) & (x <= sd)
plot(x[index], y[index],
type="h",
ylab="p(x)",
xlab="x",
xlim=c(mean-3*sd, mean+3*sd),
ylim=c(0, 1.1*max(y))
)
lines(x,y)
# approx. area by grid
( area <- sum(y[index] * dx) )
# exact area
( pnorm(sd, mean=0, sd=sd) - pnorm(-sd, mean=0, sd=sd) )
# add text to plot
text(-.6, 2, adj=c(0,0),
labels=bquote(paste(Delta, "x = ", .(dx)))
)
text(-.6, 1.8, adj=c(0,1),
labels=bquote(paste(sum(,x,), Delta, "x p(x) = ", .(round(area,3))))
)
mean <- 162
sd <- 177 - 162
curve(dnorm(x, mean, sd))
curve(dnorm(x, mean, sd), from=162-3*sd, to=162+3*sd)
mean <- 162
sd <- 177 - 162
curve(dnorm(x, mean, sd), from=162-3*sd, to=162+3*sd, ylab="p(x)")
abline(v=c(147, 177), lty=3)
data <- matrix(c(0.3,.6,.3,.6,.3,.1,.1,.1,.6), nrow=3, ncol=3)
data
grade.prob <- c(.2, .2, .6)
data * grade.prob
data * c(2,2,2)
data
data * c(2,2,2)
data * c(1,2,3)
data
data * c(1,2,3)
( conjoint.prob <- data * grade.prob )
?matrix
data <- matrix(c(0.3,.6,.3,.6,.3,.1,.1,.1,.6), nrow=3, ncol=3, dimnames=list(c("1st graders", "2nd graders", "3rd graders"), c("Ice Cream", "Fruit", "French Fries")))
data
grade.prob <- c(.2, .2, .6)
( conjoint.prob <- data * grade.prob )
colSum(conjoint.prob)
colSums(conjoint.prob)
outer(grade.prob, marg.food)
( marg.food <- colSums(conjoint.prob) )
outer(grade.prob, marg.food)
( marg.grade <- rowSums(conjoint.prob) )
outer(grade.grade, marg.food)
outer(marg.grade, marg.food)
?diff
indep.joint.prob <- outer(marg.grade, marg.food)
( indep.joint.prob - conjoint.prob )
( indep.joint.prob <- outer(marg.grade, marg.food) )
conjoint.prob
( indep.joint.prob <- outer(marg.grade, marg.food) )
( marg.food <- colSums(conjoint.prob) )
library(rgl)
demo(rgl)
?rgl
source('~/.active-rstudio-document', echo=TRUE)
