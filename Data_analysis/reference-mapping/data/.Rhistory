control=list(maxit=10000)
)
theta = seq(0.2, 0.6, by=0.1)
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 20.0), # starting values
fn=nll,
control=list(maxit=10000)
)
nll = function(x){
theta = x[1:Nsub]
omega = x[Nsub+1]
kappa = x[Nsub+2]
#   for (i in 1:length(z)){
#     lkh = dbinom(x = z[i], size = N[i], prob = theta[i], log=T) + dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
log_likelihood = function(i, theta) {
dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
return( -sum( sapply(1:length(z), FUN=log_likelihood, theta=theta) ) ) # return negative log likelihood
}
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
log_likelihood = function(i, theta) {
dbinom(x = z[i], size = N[i], prob = th[i], log=T) +
dbeta(th[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
log_likelihood = function(i, th) {
dbinom(x = z[i], size = N[i], prob = th[i], log=T) +
dbeta(th[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
nll = function(x){
theta = x[1:Nsub]
omega = x[Nsub+1]
kappa = x[Nsub+2]
#   for (i in 1:length(z)){
#     lkh = dbinom(x = z[i], size = N[i], prob = theta[i], log=T) + dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
#   log_likelihood = function(i, theta) {
#   dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
#     dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
return( -sum( sapply(1:length(z), FUN=log_likelihood, th=theta) ) ) # return negative log likelihood
}
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
nll = function(x){
theta = x[1:Nsub]
omega = x[Nsub+1]
kappa = x[Nsub+2]
#   for (i in 1:length(z)){
#     lkh = dbinom(x = z[i], size = N[i], prob = theta[i], log=T) + dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
log_likelihood = function(i, theta) {
dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
return( -sum( sapply(1:length(z), FUN=log_likelihood, th=theta) ) ) # return negative log likelihood
}
start = proc.time()
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
end = proc.time()
show(end-start)
nll = function(x){
theta = x[1:Nsub]
omega = x[Nsub+1]
kappa = x[Nsub+2]
lkh = 0
for (i in 1:length(z)){
lkh = lkh + dbinom(x = z[i], size = N[i], prob = theta[i], log=T) + dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
retunrn(-lkh)
#   log_likelihood = function(i, theta) {
#   dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
#     dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
#   return( -sum( sapply(1:length(z), FUN=log_likelihood, th=theta) ) ) # return negative log likelihood
}
start = proc.time()
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
end = proc.time()
show(end-start)
nll = function(x){
theta = x[1:Nsub]
omega = x[Nsub+1]
kappa = x[Nsub+2]
lkh = 0
for (i in 1:length(z)){
lkh = lkh + dbinom(x = z[i], size = N[i], prob = theta[i], log=T) + dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
return(-lkh)
#   log_likelihood = function(i, theta) {
#   dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
#     dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
#   return( -sum( sapply(1:length(z), FUN=log_likelihood, th=theta) ) ) # return negative log likelihood
}
start = proc.time()
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
end = proc.time()
show(end-start)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0))
warnings()
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0))
warnings()
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=3)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=5)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=5)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=6)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=7)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=8)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=8)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=3)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=3)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=5)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), ndigit=7)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), gradtol=0.001)
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), gradtol=0.001, print.level=2)
nll = function(x){
x = sapply( x, FUN=function(x) min(1, abs(x)) ) # make sure proposed parameter values are positive and less than 1
theta = x[1:Nsub]
omega = x[Nsub+1]
kappa = x[Nsub+2]
lkh = 0
for (i in 1:length(z)){
lkh = lkh + dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
return(-lkh)
#   log_likelihood = function(i, theta) {
#   dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
#     dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
#   return( -sum( sapply(1:length(z), FUN=log_likelihood, th=theta) ) ) # return negative log likelihood
}
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), gradtol=0.001, print.level=2)
nll = function(x){
theta = sapply( x[1:Nsub], FUN=function(x) min(1, abs(x)) )
omega = sapply( x[Nsub+1], FUN=function(x) min(1, abs(x)) )
kappa = sapply( x[Nsub+2], FUN=function(x) abs(x) )
lkh = 0
for (i in 1:length(z)){
lkh = lkh + dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
}
return(-lkh)
#   log_likelihood = function(i, theta) {
#   dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
#     dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
#   }
#   return( -sum( sapply(1:length(z), FUN=log_likelihood, th=theta) ) ) # return negative log likelihood
}
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), gradtol=0.001, print.level=2)
warnings()
start = proc.time()
optim(par=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
fn=nll,
control=list(maxit=10000)
)
end = proc.time()
nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), gradtol=0.001)
ls()
betaABfromModeKappa(mode=omega_est, kappa=kappa_est)
omega_est = MLE$estimate[6]
kappa_est = MLE$estimate[7]
MLE = nlm(f=nll, p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), gradtol=0.001)
omega_est = MLE$estimate[6]
kappa_est = MLE$estimate[7]
betaABfromModeKappa(mode=omega_est, kappa=kappa_est)
AB = betaABfromModeKappa(mode=omega_est, kappa=kappa_est)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b))
X11(width=4, height=4)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b))
?points
points(rep(0, 5), z/N, pch=3, col="red")
X11(width=4, height=4)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b), type="l")
points(z/N, rep(0, 5), pch=3, col="red")
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b), type="l")
points(z/N, rep(0, 5), pch=3, col="red")
points(MLE$estimate[1:5], rep(.25, 5), pch=1, col="skyblue")
?arrows
arrows(x0=z/N, y0=rep(0, 5), x1=MLE$estimate[1:5], y1=rep(.25,5))
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b), type="l")
points(z/N, rep(0, 5), pch=3, col="red")
points(MLE$estimate[1:5], rep(.25, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0, 5), x1=MLE$estimate[1:5], y1=rep(.25,5), length=.05, lwd=2)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b), type="l")
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.25, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0, 5), x1=MLE$estimate[1:5], y1=rep(.25,5), length=.05, lwd=2)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b), type="l")
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=2)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b), type="l")
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta | omega, kappa) )
)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta *"|"* omega, kappa) )
)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta*" | "*omega, kappa) )
)
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
?text
text(0.2, 2.0,
labels=bquote(omega*"="*.(signif(MLE$estimate[6],2)), kappa*"="*.(signif(MLE$estimate[7],2)))
)
text(0.2, 2.0,
labels=bquote(omega*"="*.(signif(MLE$estimate[6],2))*" , "*kappa*"="*.(signif(MLE$estimate[7],2)))
)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta*" | "*omega, kappa) )
)
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
text(0.4, 2.0,
labels=bquote(omega*"="*.(signif(MLE$estimate[6],2))*" , "*kappa*"="*.(signif(MLE$estimate[7],2)))
)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta*" | "*omega, kappa) )
)
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
text(0.4, 2.0, pos=4
labels=bquote(omega*"="*.(signif(MLE$estimate[6],2))*" , "*kappa*"="*.(signif(MLE$estimate[7],2)))
)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta*" | "*omega, kappa) )
)
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
text(0.4, 2.0, pos=4,
labels=bquote(omega*"="*.(signif(MLE$estimate[6],2))*" , "*kappa*"="*.(signif(MLE$estimate[7],2)))
)
signif(MLE$estimate[7],2
)
?signif
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta*" | "*omega, kappa) )
)
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
text(0.4, 2.0, pos=4,
labels=bquote(omega*"="*.(round(MLE$estimate[6],2))*" , "*kappa*"="*.(round(MLE$estimate[7],2)))
)
graphics.off()
X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta*" | "*omega, kappa) )
)
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
text(0.35, 2.0, pos=4,
labels=bquote(omega*"="*.(round(MLE$estimate[6],3))*" , "*kappa*"="*.(round(MLE$estimate[7],3)))
)
# get counts of successes from the raw data, so that I can use a binomial instead of a bernouilli model
z = aggregate( y , by=list(s) , FUN=sum )$x
N = aggregate( rep(1,length(y)) , by=list(s) , FUN=sum )$x
Nsub = length(unique(z))
# define a function that returns a negative log likelihood to minimize
nll = function(x){
theta = x[1:Nsub]
omega = x[Nsub+1]
kappa = x[Nsub+2]
ll = 0
for (i in 1:length(z)){
ll = ll + dbinom(x = z[i], size = N[i], prob = theta[i], log=T) +
dbeta(theta[i], omega*(kappa-2)+1, (1-omega)*(kappa-2)+1, log=T)
# dbeta returns a density instead of a probability, but that doesn't matter here for the purpose of ML estimation
}
return(-ll) # return the negative log likelihood
}
# use the R function non-linear maximization to get the MLE's of all 7 parameters
MLE = nlm(f=nll, # function to minimize
p=c(seq(0.3, 0.7, by=0.1), 0.5, 2.0), # starting values
gradtol=0.001 # precision
)
MLE_omega = MLE$estimate[6]
MLE_kappa = MLE$estimate[7]
# get the a and b parameters for a beta distribution with mode=omega and kappa=kappa
AB = betaABfromModeKappa(mode=MLE_omega, kappa=MLE_kappa)
#graphics.off()
#X11(width=7, height=7)
par(mfrow=c(1,1))
x = seq(0,1, len=100)
# plot MLE of group-level beta distribution
plot(x, dbeta(x, AB$a, AB$b),
type="l",
xlab="data proportion or theta value",
ylab=bquote( dbeta(theta*" | "*omega, kappa) )
)
# add red crosses at the proportion of successes of each subject
# i. e. the ML estimate if the data of each individual are considered separately
points(z/N, rep(0, 5), pch=3, col="red", lwd=2)
# add blue points at the MLE for each subject in this hierarchical model
points(MLE$estimate[1:5], rep(.5, 5), pch=1, col="skyblue", lwd=2)
# add arrows to emphasis the shift from isolated to hierarchical analysis (shrinkage)
arrows(x0=z/N, y0=rep(0.05, 5), x1=MLE$estimate[1:5], y1=rep(.45,5), length=.05, lwd=3)
# add the parameters for the MLE group-level beta distribution
text(0.35, 2.0, pos=4,
labels=bquote(omega*"="*.(round(MLE$estimate[6],3))*" , "*kappa*"="*.(round(MLE$estimate[7],3)))
)
?nlm
source("/Users/Claudius/Dropbox/Kruschke_Dog_Book/DBDA2Eprograms/Jags-Ydich-XnomSsubj-MbinomBetaOmegaKappa.R")
runjagsMethodDefault
str(myData)
detect.cores()
library("parallel")
detect.cores()
detectCores
detectCores()
library("parallel")
detectCores()
library("parallel")
detectCores()
# Generate the MCMC chain:
startTime = proc.time()
mcmcCoda = genMCMC( data=myData , sName="s" , yName="y" ,
numSavedSteps=20000 , # saveName=fileNameRoot ,
thinSteps=10, runjagsMethod="parallel" # forcing parallel run
shape=0.01, rate=0.01,
priorFamily="uniform"
)
stopTime = proc.time()
show( stopTime-startTime )
# Generate the MCMC chain:
startTime = proc.time()
mcmcCoda = genMCMC( data=myData , sName="s" , yName="y" ,
numSavedSteps=20000 , # saveName=fileNameRoot ,
thinSteps=10, runjagsMethod="parallel", # forcing parallel run
shape=0.01, rate=0.01,
priorFamily="uniform"
)
stopTime = proc.time()
show( stopTime-startTime )
# Display diagnostics of chain, for specified parameters:
diagMCMC( codaObject=mcmcCoda , parName="omega" , knitr=T
# saveName=fileNameRoot ,  saveType=graphFileType
)
# Generate the MCMC chain:
startTime = proc.time()
mcmcCoda = genMCMC( data=myData , sName="s" , yName="y" ,
numSavedSteps=20000 , # saveName=fileNameRoot ,
thinSteps=10, junjagsMethod="rjags",
shape=0.01, rate=0.01,
priorFamily="uniform"
)
stopTime = proc.time()
show( stopTime-startTime )
# Generate the MCMC chain:
startTime = proc.time()
mcmcCoda = genMCMC( data=myData , sName="s" , yName="y" ,
numSavedSteps=20000 , # saveName=fileNameRoot ,
thinSteps=10, runjagsMethod="rjags",
shape=0.01, rate=0.01,
priorFamily="uniform"
)
stopTime = proc.time()
show( stopTime-startTime )
# Display diagnostics of chain, for specified parameters:
diagMCMC( codaObject=mcmcCoda , parName="omega" , knitr=T
# saveName=fileNameRoot ,  saveType=graphFileType
)
?options
mcmcCoda[1:10]
1600/53/3.8
53/3.8
1600/53/3.8
1600/14
1600/14*1.10
113+60+250*0.12+292+125
126+60+250*0.12+287+125
250*0.12
costs = c(287, 146, 125, (1000-750)*0.12, 60)
costs = c(costs, sum(costs))
costs = data.frame(costs, row.names=c("ferry", car hire", "fuel", "excess milage", Europdrive Pack", "total"))
costs = data.frame(costs, row.names=c("ferry", car hire", "fuel", "excess milage", "Europdrive Pack", "total"))
costs = data.frame(costs, row.names=c("ferry", "car hire", "fuel", "excess milage", "Europdrive Pack", "total"))
kable(costs)
library(knitr)
kable(costs)
20*3.8
20*3.8*1.12
1000/28
1000/28*3.8*1.12
fuel = 1000 / 28 * 3.8 * 1.12
fuel = 1000 / 28 * 3.8 * 1.12
costs = c(266, 276, fuel, 60, 72)
costsTotal = c(costs, sum(costs))
costsTotal = data.frame(costsTotal, row.names=c("ferry", "car hire", "fuel", "Europdrive Pack", "flight", "total"))
kable(costsTotal)
geno_calls <- read.delim("export_depth_cov_09042015.tsv", header=T)
setwd("~/Data_analysis/reference-mapping/data")
geno_calls <- read.delim("export_depth_cov_09042015.tsv", header=T)
length(geno_calls$geno_calls)
length(geno_calls$geno_calls == 1)
length(geno_calls$geno_calls == 1)
mean(geno_calls$geno_calls)
sum(geno_calls$geno_calls == 36)/length(geno_calls$geno_calls) * 100
length(geno_calls$geno_calls)
length(geno_calls$geno_calls == 1)
tail(geno_calls$geno_calls)
head(geno_calls$geno_calls)
head(geno_calls$geno_calls == 1)
sum(geno_calls$geno_calls == 1)
sum(geno_calls$geno_calls == 1)/length(geno_calls$geno_calls)
sum(geno_calls$geno_calls == 1)/length(geno_calls$geno_calls) * 100
181289 * 1.1 / 100
